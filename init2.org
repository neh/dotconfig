#+property: header-args:emacs-lisp :tangle (concat (file-name-sans-extension (buffer-file-name)) ".el")
#+property: header-args :mkdirp yes :comments no
#+startup: indent

#+begin_src emacs-lisp :exports none
  ;; DO NOT EDIT THIS FILE DIRECTLY
  ;; This is a file generated from a literate programing source file located at
  ;; https://github.com/neh/emacs.d/blob/master/init.org.
  ;; You should make any changes there and regenerate it from Emacs org-mode using C-c C-v t
#+end_src

#+title: My Emacs config file
#+author: Nathan Howell
#+email: nath@nhowell.net

This is my Emacs configuration file.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]] using [[https://orgmode.org/][org-mode]]. See [[file:init.el][init.el]] for the generated file. You can see this in a nicer format on my blog post [[http://zzamboni.org/post/my-emacs-configuration-with-commentary/][My Emacs Configuration, With Commentary]].

* Performance optimization

Lately I've been playing with optimizing my Emacs load time. I have found a couple of useful resources, including:

- [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][Two easy little known steps to speed up Emacs start up time]]
- [[https://blog.d46.us/advanced-emacs-startup/][Advanced Techniques for Reducing Emacs Startup Time]]

Based on these, I have added the code below.

First, a hook that reports how long and how many garbage collections the startup took.

#+begin_src emacs-lisp
  ;; Use a hook so the message doesn't get clobbered by other messages.
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs ready in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

Next, we wrap the whole init file in a block that sets =file-name-handler-alist= to =nil= to prevent any special-filename parsing of files loaded from the init file (e.g. remote files loaded through tramp, etc.). The =let= block gets closed in the [[Epilogue][Epilogue]].

#+begin_src emacs-lisp
  ;; (let ((file-name-handler-alist nil))
#+end_src

We set =gc-cons-threshold= to its maximum value, to prevent any garbage collection from happening during load time. We also reset this value in the [[Epilogue][Epilogue]].

#+begin_src emacs-lisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

Handy profiling command:
#+begin_src shell :tangle no :results silent
  emacs -Q -l profile-dotemacs.el --eval "(setq profile-dotemacs-file (setq load-file-name \"/home/nathan/.emacs.d/init2.el\"))" -f profile-dotemacs
#+end_src

* Base settings
Turn off all startup messages, splash screens, menus, scrollbars, etc.
#+begin_src emacs-lisp
  (setq inhibit-splash-screen t
        inhibit-startup-message t
        initial-scratch-message nil
        inhibit-startup-echo-area-message t)

  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

Set up scrolling how I like it:
#+begin_src emacs-lisp
  (setq mouse-wheel-scroll-amount '(2 ((shift) . 1)) ;; one line at a time
        mouse-wheel-progressive-speed nil ;; don't accelerate scrolling
        mouse-wheel-follow-mouse 't ;; scroll window under mouse
        scroll-step 1 ;; keyboard scroll one line at a time
        scroll-margin 5
        hscroll-step 5
        hscroll-margin 5
        scroll-preserve-screen-position t
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01
        scroll-conservatively 101) ;; Don't jump around when scrolling
#+end_src

Set the window titles:
#+begin_src emacs-lisp
  (setq frame-title-format "%b" ;; focused window title format
        icon-title-format "%b") ;; unfocused window title format
#+end_src

Set my preferred font and size, taking display DPI into account.
#+begin_src emacs-lisp
  (defun neh/set-frame-options (frame)
    "Set options for a FRAME."
    (let ((mydpi (/ (display-pixel-width) (/ (display-mm-width) 25.4)))
          (myfont "Iosevka"))
      (if (> mydpi 160)
          (set-frame-font (format "%s-10" myfont))
        (set-frame-font (format "%s-10" myfont)))))

  (neh/set-frame-options nil)
  (add-hook 'after-make-frame-functions #'neh/set-frame-options)
#+end_src

I don’t really use the customization system in Emacs (yet?) but let’s at least make it use a file that isn’t the main config.
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file 'no-error)
#+end_src

* Package management
I like [[https://github.com/raxod502/straight.el][straight.el]] instead of package.el, so let’s bootstrap that.
#+begin_src emacs-lisp
  (setq straight-check-for-modifications '(check-on-save))
  ;; Bootstrap straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

And then make [[https://github.com/jwiegley/use-package][use-package]] use straight, and install use-package using straight:
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)
  (setq use-package-verbose t
        ;; use-package-always-defer t
        )
#+end_src

* Pretty it up
I like this theme.
#+begin_src emacs-lisp
  (use-package brutalist-theme)
  (load-theme 'brutalist t)
#+end_src

But I like some things to be set no matter the theme. There’s probably a hook or something for this.
#+begin_src emacs-lisp
  (set-face-italic 'font-lock-comment-face t)
  (set-face-attribute 'mode-line nil :height 1.0)
  (set-face-attribute 'mode-line-inactive nil :height 1.0)
#+end_src

* Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :demand t

    :hook (after-init . doom-modeline-init)
    :config
    (setq-default doom-modeline-column-zero-based nil)
    (setq doom-modeline-height 20
          doom-modeline-bar-width 3
          column-number-indicator-zero-based nil)
    (column-number-mode)
    (set-face-attribute 'doom-modeline-evil-emacs-state nil :background "DarkMagenta" :foreground "#ffffff")
    (set-face-attribute 'doom-modeline-evil-insert-state nil :background "#ffd700" :foreground "#000000")
    (set-face-attribute 'doom-modeline-evil-motion-state nil :background "SteelBlue" :foreground "#ffffff")
    (set-face-attribute 'doom-modeline-evil-normal-state nil :background "ForestGreen" :foreground "#ffffff")
    (set-face-attribute 'doom-modeline-evil-operator-state nil :background "SteelBlue" :foreground "#ffffff")
    (set-face-attribute 'doom-modeline-evil-visual-state nil :background "#fe8019" :foreground "#000000")
    (set-face-attribute 'doom-modeline-evil-replace-state nil :background "red4" :foreground "#ffffff")
    (doom-modeline-init))
#+end_src

* Keybindings
General
#+begin_src emacs-lisp
  (use-package general
    :demand t

    :config
    (general-create-definer
      neh/leader-keys
      :keymaps 'override
      :states '(emacs normal visual motion insert)
      :non-normal-prefix "C-SPC"
      :prefix "SPC")

    (general-override-mode t)

    (general-define-key
     "C-M-t" 'scroll-other-window
     "C-M-n" 'scroll-other-window-down)

    (general-add-advice (list #'evil-search-previous
                              #'evil-search-next)
                        :after #'evil-scroll-line-to-center)

    (general-define-key
     "C-h" 'evil-window-left
     "C-t" 'evil-window-down
     "C-n" 'evil-window-up
     "C-s" 'evil-window-right)

    (general-define-key
     :states '(normal visual)
     "h" 'evil-backward-char
     "t" 'evil-next-visual-line
     "n" 'evil-previous-visual-line
     "s" 'evil-forward-char

     "l" 'evil-search-next
     "L" 'evil-search-previous
     "S" 'evil-window-bottom

     "N" 'evil-narrow-indirect)

    (neh/leader-keys
      "<SPC>" '(save-buffer :which-key "save")

      "b" '(:ignore t :which-key "buffer")
      "bd" '(evil-delete-buffer :which-key "delete buffer")

      "cc" '(comment-or-uncomment-region-or-line :which-key "toggle comment")

      "f" '(:ignore t :which-key "formatting")
      "fa" '(auto-fill-mode :which-key "auto fill")
      "fc" '(visual-fill-column-mode :which-key "visual fill column")
      "fi" '(indent-region :which-key "indent region")
      "fp" '(fill-paragraph :which-key "paragraph")
      "fr" '(fill-region :which-key "fill region")
      "ft" '(toggle-truncate-lines :which-key "truncate lines")
      "fv" '(visual-line-mode :which-key "visual line mode")

      "g" '(:ignore t :which-key "git")

      "h" '(:ignore t :which-key "help")

      "hl" '(highlight-lines-matching-regexp :which-key "highlight line")
      "hr" '(highlight-regexp :which-key "highlight regexp")
      "hu" '(unhighlight-regexp :which-key "unhighlight regexp")

      "i" '(:ignore t :which-key "insert")
      "ip" '(clipboard-yank :which-key "paste from clipboard")

      "n" '(:ignore t :which-key "narrow")
      "nd" '(narrow-to-defun :which-key "narrow to defun")
      "np" '(narrow-to-page :which-key "narrow to page")
      "nr" '(narrow-to-region :which-key "narrow to region")
      "nw" '(widen :which-key "widen")

      "o" '(:ignore t :which-key "open")
      "oe" '(mode-line-other-buffer :which-key "previous buffer")
      ;; "oo" '(persp-switch-to-buffer :which-key "switch buffer")
      ;; "ov" '(persp-switch :which-key "switch perspective")

      "Q" #'bury-buffer

      "s" '(:ignore t :which-key "search")

      "r" '(:ignore t :which-key "read")
      "rc" '(hydra-codereading/body :which-key "changes")
      "rg" '(hydra-git-gutter/body :which-key "changes")
      "ro" '(hydra-org/body :which-key "org")
      "rr" '(hydra-reading/body :which-key "plain text")

      "v" '(:ignore t :which-key "view")
      "vw" '(whitespace-mode :which-key "whitespace")

      "xb" '(eval-buffer :which-key "eval buffer")
      "xe" '(eval-expression :which-key "eval expression")
      "xr" '(eval-region :which-key "eval region")
      "xs" '(eval-last-sexp :which-key "eval sexp")

      "zt" '(hydra-zoom/body :which-key "zoom text")))
#+end_src

Which-key shows a handy popup for available keybindings at any given time.
#+begin_src emacs-lisp
  (use-package which-key
    :demand t
    :config
    (which-key-setup-side-window-bottom)
    (setq which-key-idle-secondary-delay 0.25)
    (which-key-mode))
#+end_src

Key chords are interesting, and I’m not sure I’ll keep them yet. Doing vim-style bindings with leaders is maybe just as good?
#+begin_src emacs-lisp
  (use-package key-chord)
  (use-package use-package-chords
    :config
    (key-chord-mode 1))
#+end_src

* Eeeeevil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration nil
          evil-want-keybinding nil
          evil-move-cursor-back t
          evil-vsplit-window-right t)

    :config
    (evil-mode 1)

    (evil-set-initial-state 'ivy-occur-mode 'emacs)

    (unbind-key "C-h" evil-normal-state-map)
    (unbind-key "C-t" evil-normal-state-map)
    (unbind-key "C-n" evil-normal-state-map)
    (unbind-key "C-s" evil-normal-state-map)
    (unbind-key "C-e" evil-motion-state-map)

    (setq evil-normal-state-tag   (propertize " N ")
          evil-emacs-state-tag    (propertize " E ")
          evil-insert-state-tag   (propertize " I ")
          evil-replace-state-tag  (propertize " R ")
          evil-motion-state-tag   (propertize " M ")
          evil-visual-state-tag   (propertize " V ")
          evil-operator-state-tag (propertize " O "))

    (evil-define-operator evil-narrow-indirect (beg end type)
      "Indirectly narrow the region from BEG to END."
      (interactive "<R>")
      (evil-normal-state)
      (narrow-to-region-indirect beg end))

    (use-package evil-surround
      :config
      (global-evil-surround-mode))

    (use-package evil-collection
      ;; :demand t
      :config
      (evil-collection-init))

    (use-package evil-indent-plus
      :config
      (evil-indent-plus-default-bindings))

    (use-package evil-textobj-line)
    (use-package evil-textobj-syntax)
    (use-package evil-ex-fasd))
#+end_src

** TODO look into evil-collection minibuffer setup

* Navigation?
#+begin_src emacs-lisp
  (use-package ivy
    :init
    (defun reloading (cmd)
      (lambda (x)
        (funcall cmd x)
        (ivy--reset-state ivy-last)))

    (defun given-file (cmd prompt) ; needs lexical-binding
      (lambda (source)
        (let ((target
               (let ((enable-recursive-minibuffers t))
                 (read-file-name
                  (format "%s %s to:" prompt source)))))
          (funcall cmd source target 1))))

    (defun confirm-delete-file (x)
      (dired-delete-file x 'confirm-each-subdirectory))

    (defun neh-open-file-in-vsplit (f)
      (evil-window-vsplit 80 f)
      (balance-windows))

    :general
    (neh/leader-keys
      "oo" '(ivy-switch-buffer :which-key "switch buffer")
      "xa" '(ivy-resume :which-key "ivy resume"))

    (general-define-key
     :keymaps 'ivy-minibuffer-map
     "<escape>" 'keyboard-escape-quit
     "C-t" 'ivy-next-line
     "C-n" 'ivy-previous-line
     "C-M-t" 'ivy-next-line-and-call
     "C-M-n" 'ivy-previous-line-and-call
     "C-b" 'ivy-scroll-down-command
     "C-f" 'ivy-scroll-up-command
     "C-d" 'ivy-call)

    (general-define-key
     :keymaps 'counsel-find-file-map
     "TAB" 'ivy-alt-done
     "C-s" 'neh-open-file-in-vsplit)

    (general-define-key
     :keymaps 'ivy-occur-mode-map
     "t" 'ivy-occur-next-line
     "n" 'ivy-occur-previous-line
     "RET" 'ivy-occur-press
     "a" 'ivy-occur-read-action
     "c" 'ivy-occur-toggle-calling
     "C-f" 'evil-scroll-page-down
     "C-b" 'evil-scroll-page-up)

    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d "
          ivy-format-function #'ivy-format-function-arrow
          ivy-extra-directories nil
          ivy-height 15
          ivy-use-selectable-prompt t
          ivy-re-builders-alist
          '((t . ivy--regex-fuzzy))
          ivy-initial-inputs-alist nil)

    (use-package amx
      :config
      (amx-mode)))


  (use-package prescient
    :config
    (prescient-persist-mode))

  (use-package ivy-prescient
    :after (prescient ivy)
    :config
    (ivy-prescient-mode))

  (use-package company-prescient
    :disabled t
    :after (prescient company)
    :config
    (company-prescient-mode))

  (use-package counsel
    :general
    (neh/leader-keys
      "e" '(counsel-M-x :which-key "M-x")

      "ha" '(counsel-apropos :which-key "apropos")
      "hf" '(counsel-describe-function :which-key "describe function")
      "hv" '(counsel-describe-variable :which-key "describe variable")

      "oa" '(counsel-linux-app :which-key "app")
      "of" '(counsel-find-file :which-key "open file")

      "sa" '(swiper-all :which-key "search all buffers")
      "sf" '(counsel-ag :which-key "search files")
      "sg" '(counsel-git-grep :which-key "search files in git")
      "sh" '(counsel-grep-or-swiper :which-key "search buffer")
      "so" '(counsel-org-goto-all :which-key "search org")
      "st" '(counsel-semantic-or-imenu :which-key "search tags"))

    :config
    (setq counsel-ag-base-command "ag --nocolor --nogroup --ignore-case %s"
          counsel-grep-base-command "grep -inE '%s' %s")
    (counsel-mode 1)

    ;; These don't work on a fresh load, but seem to start working at some
    ;; point. Strange.
    (ivy-add-actions
     'counsel-find-file
     `(("c" ,(given-file #'copy-file "Copy") "copy")
       ("d" ,(reloading #'confirm-delete-file) "delete")
       ("s" neh-open-file-in-vsplit "vsplit")
       ("m" ,(reloading (given-file #'rename-file "Move")) "move"))))


  (use-package historian
    :disabled t
    :config
    (historian-mode))

  (use-package ivy-historian
    :disabled t
    :after ivy
    :config
    (setq ivy-historian-freq-boost-factor 100
          ivy-historian-recent-boost 100
          ivy-historian-recent-decrement 5)

    (ivy-historian-mode 1))
#+end_src

* Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :general
    (neh/leader-keys
      "oh" '(counsel-projectile-find-file :which-key "open file in project")
      "op" '(counsel-projectile-switch-project :which-key "switch project")
      "sp" '(counsel-projectile-rg :which-key "search project"))

    :config
    (setq projectile-completion-system 'ivy)

    (projectile-mode)

    (use-package counsel-projectile
      ;; :disabled t
      :after (counsel projectile)

      :config
      ;; Set the default switch project action to find files so that paths are included in the search list
      (counsel-projectile-modify-action 'counsel-projectile-switch-project-action
                                        '((default counsel-projectile-switch-project-action-find-file)))

      (ivy-add-actions
       'counsel-projectile-find-file
       `(("c" ,(given-file #'copy-file "Copy") "copy")
         ("d" ,(reloading #'confirm-delete-file) "delete")
         ("m" ,(reloading (given-file #'rename-file "Move")) "move")
         ("b" counsel-find-file-cd-bookmark-action "cd bookmark")))))
#+end_src

* Company
#+begin_src emacs-lisp
  (use-package company
    :bind (:map company-active-map
           ("M-n" . nil)
           ("M-p" . nil)
           ("C-t" . #'company-select-next)
           ("C-n" . #'company-select-previous)
           ("TAB" . #'company-complete)
           ("<tab>" . #'company-complete)
           ("RET" . #'company-complete-selection))

    :config
    (add-hook 'after-init-hook 'global-company-mode))

  (use-package company-statistics
    :disabled t
    :init
    (add-hook 'company-mode-hook #'company-statistics-mode))

  (use-package company-terraform
    :config
    (company-terraform-init))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-enable-icon nil)
    (add-to-list 'company-box-frame-parameters
                 '(font . "-CYEL-Iosevka-normal-normal-normal-*-14-*-*-*-d-0-iso10646-1"))
    (add-to-list 'company-box-frame-parameters
                 '(font-parameter . "-CYEL-Iosevka-normal-normal-normal-*-14-*-*-*-d-0-iso10646-1")))
#+end_src

* Git
#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (set-face-attribute 'diff-hl-change nil :foreground "medium blue" :background "DodgerBlue1")
    (set-face-attribute 'diff-hl-insert nil :foreground "dark green" :background "ForestGreen")
    (set-face-attribute 'diff-hl-delete nil :foreground "dark red" :background "red4"))
#+end_src

#+begin_src emacs-lisp
  (defun neh/after-jump (&optional arg)
    "Position text sanely after jumping. ARG is unused but apparently necessary."
    (evil-scroll-line-to-center (line-number-at-pos)))
#+end_src

#+begin_src emacs-lisp
  (use-package git-gutter
    :general
    (general-define-key
     :states '(normal visual)
     "gp" 'git-gutter:previous-hunk
     "gn" 'git-gutter:next-hunk
     "gs" 'git-gutter:popup-hunk
     "gS" 'git-gutter:stage-hunk
     "gU" 'git-gutter:revert-hunk)

    :init
    (setq git-gutter:disabled-modes '(org-mode))
    (global-git-gutter-mode -1)

    :config
    (advice-add 'git-gutter:previous-hunk :after #'neh/after-jump)
    (advice-add 'git-gutter:next-hunk :after #'neh/after-jump)

    (setq git-gutter:added-sign ""
          git-gutter:deleted-sign ""
          git-gutter:modified-sign ""
          git-gutter:ask-p nil)
    (set-face-foreground 'git-gutter:modified "DeepSkyBlue2")
    (set-face-foreground 'git-gutter:added "ForestGreen")
    (set-face-foreground 'git-gutter:deleted "red4")
    )
#+end_src

#+begin_src emacs-lisp
  (straight-use-package 'magit)
  (use-package magit
    :straight nil
    :general
    (general-define-key
     :keymaps 'magit-mode-map
     "C-b" 'evil-scroll-page-up
     "C-f" 'evil-scroll-page-down
     "C-t" 'magit-section-forward
     "C-n" 'magit-section-backward
     "M-t" 'magit-section-forward-sibling
     "M-n" 'magit-section-backward-sibling
     "r" 'magit-refresh
     "R" 'magit-rebase-popup
     "g" 'magit-tag-popup
     "t" 'evil-next-visual-line
     "n" 'evil-previous-visual-line)

    (general-define-key
     :keymaps 'magit-diff-mode-map
     "/" 'evil-search-forward
     "l" 'evil-search-next
     "L" 'evil-search-previous)

    (neh/leader-keys
      "gc" '(magit-commit :which-key "commit")
      "gd" '(magit-diff-popup :which-key "diff")
      "gf" '(magit-stage-file :which-key "stage file")
      "gl" '(magit-log-popup :which-key "log")
      ;; "glf" '(magit-log-buffer-file :which-key "current buffer log")
      "gm" '(magit-dispatch-popup :which-key "menu")
      "gP" '(magit-push-popup :which-key "push")
      "gs" '(magit-status :which-key "status"))

    :config
    ;; There doesn't seem to be a "nice" way to adjust magit popups, so I stole
    ;; this method from evil-magit
    ;; refresh
    (magit-change-popup-key 'magit-dispatch-popup
                            :action (string-to-char "g") (string-to-char "r"))
    ;; rebase popup
    (magit-change-popup-key 'magit-dispatch-popup
                            :action (string-to-char "r") (string-to-char "R"))
    ;; tag popup
    (magit-change-popup-key 'magit-dispatch-popup
                            :action (string-to-char "t") (string-to-char "g"))

    (setq magit-completing-read-function 'ivy-completing-read)
    (add-hook 'git-commit-mode-hook 'evil-insert-state))
#+end_src

* Org
#+begin_src emacs-lisp
  (use-package org
    :general
    (neh/leader-keys
      "nb" '(org-narrow-to-block :which-key "narrow to block")
      "ne" '(org-narrow-to-element :which-key "narrow to element")
      "ns" '(org-narrow-to-subtree :which-key "narrow to subtree")

      "og" '(org-agenda :which-key "agenda")
      "o." '(org-open-at-point :which-key "follow link"))

    (:keymaps 'org-mode-map
     :states '(normal emacs)
     :prefix  "g"
     "." 'org-open-at-point)

    (:keymaps 'org-mode-map
     :states '(normal emacs)
     "<RET>" 'org-tree-to-indirect-buffer
     "ze" 'outline-show-branches
     "C-M-t" 'scroll-other-window
     "C-M-n" 'scroll-other-window-down)

    ;; (:keymaps 'org-mode-map
    ;;  "H" 'org-shiftleft
    ;;  "T" 'org-shiftdown
    ;;  "N" 'org-shiftup
    ;;  "S" 'org-shiftright
    ;;  "C-h" 'org-shiftleft
    ;;  "C-t" 'org-shiftdown
    ;;  "C-n" 'org-shiftup
    ;;  "C-s" 'org-shiftright
    ;;  )

    :init
    (let* ((variable-tuple (cond ((x-list-fonts "DejaVu Sans") '(:font "DejaVu Sans"))
                                 ((x-list-fonts "DejaVu Serif") '(:font "DejaVu Serif"))
                                 ((x-list-fonts "Noto Sans") '(:font "Noto Sans"))
                                 ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
                                 (nil (warn "Cannot find a Sans Serif Font. Install Source Sans Pro."))))
           (fixed-tuple (cond ((x-list-fonts "Iosevka") '(:font "Iosevka"))
                              (nil (warn "Cannot find a fixed width font."))))
           (base-font-color     (face-foreground 'default nil 'default))
           ;; (headline           `(:inherit default :weight bold :foreground ,base-font-color))
           ;; (done               `(:inherit default :weight normal :height 0.9 :foreground "#bdae93"))
           ;; (variable           `(:inherit default :foreground ,base-font-color)))
           (headline           `(:weight bold :foreground ,base-font-color))
           (done               `(:weight normal :foreground "#7c6f64"))
           (variable           `(:foreground ,base-font-color)))

      (defface org-inprogress
        '((default :inherit default))
        "Face for INPROGRESS org tasks")
      (custom-theme-set-faces 'user
                              `(fixed-pitch ((t (,@fixed-tuple))))
                              `(variable-pitch ((t (,@variable-tuple))))
                              `(org-ellipsis ((t (:underline nil :weight normal))))
                              `(org-indent ((t (:inherit (org-hide fixed-pitch)))))
                              `(org-code ((t (:inherit fixed-pitch))))
                              `(org-table ((t (:inherit fixed-pitch))))
                              ;; `(org-link ((t (:inherit default :foreground "#f4e8ba"))))
                              ;; `(org-link ((t (:inherit default))))
                              ;; `(org-level-8 ((t (,@headline ,@variable-tuple :slant italic))))
                              ;; `(org-level-7 ((t (,@headline ,@variable-tuple :slant italic))))
                              ;; `(org-level-6 ((t (,@headline ,@variable-tuple :slant italic))))
                              ;; `(org-level-5 ((t (,@headline ,@variable-tuple :slant italic))))
                              ;; `(org-level-4 ((t (,@headline ,@variable-tuple :slant italic))))
                              ;; `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.1 :slant italic))))
                              ;; `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.1 :slant italic))))
                              ;; `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.2 :slant italic))))
                              `(org-todo ((t (,@headline ,@variable-tuple :background "#ddbb00"))))
                              `(org-inprogress ((t (,@headline ,@variable-tuple :foreground "white" :background "ForestGreen"))))
                              `(org-done ((t (,@done ,@variable-tuple :strike-through t))))
                              `(org-archived ((t (,@done ,@variable-tuple :strike-through t))))
                              `(org-headline-done ((t (,@done ,@variable-tuple))))
                              `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil)))))
      (setq org-todo-keyword-faces
            '(("TODO" . org-todo)
              ("INPROGRESS" . org-inprogress))))

    (defmacro my-org-in-calendar (command)
      (let ((name (intern (format "my-org-in-calendar-%s" command))))
        `(progn
           (defun ,name ()
             (interactive)
             (org-eval-in-calendar '(call-interactively #',command)))
           #',name)))

    (general-def org-read-date-minibuffer-local-map
      "M-h" (my-org-in-calendar calendar-backward-day)
      "M-s" (my-org-in-calendar calendar-forward-day)
      "M-n" (my-org-in-calendar calendar-backward-week)
      "M-t" (my-org-in-calendar calendar-forward-week)
      "M-H" (my-org-in-calendar calendar-backward-month)
      "M-S" (my-org-in-calendar calendar-forward-month)
      "M-N" (my-org-in-calendar calendar-backward-year)
      "M-T" (my-org-in-calendar calendar-forward-year))

    :config
    (setq org-todo-keywords
          '((sequence "TODO" "INPROGRESS" "WAITING" "|" "DONE" "CANCELED")))

    (setq org-startup-indented t
          org-ellipsis "  "
          org-src-fontify-natively t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-hide-emphasis-markers t
          org-pretty-entities t
          org-cycle-separator-lines 2
          org-M-RET-may-split-line '((default . nil)))

    (set-face-attribute 'org-ellipsis '(:underline nil :weight normal))

    (add-hook 'org-mode-hook 'org-indent-mode)
    ;; (add-hook 'org-mode-hook 'visual-fill-column-mode)
    (add-hook 'org-mode-hook 'set-buffer-variable-pitch)
    ;; (add-hook 'org-mode-hook (lambda ()
    ;;                            (setq-local global-hl-line-mode
    ;;                                        nil)))

    (setq org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((shell . t)
       (emacs-lisp . t))))

  (use-package org-tempo
    :straight nil
    :after org)
#+end_src

#+begin_src emacs-lisp
  (defun set-buffer-variable-pitch ()
    "Set this buffer to variable pitch mode, keeping some `org-mode' parts in fixed pitch."
    (interactive)
    (variable-pitch-mode t)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch))
#+end_src

#+begin_src emacs-lisp
  (use-package evil-org
    :after evil
    :config
    (setq evil-org-movement-bindings '((up . "n")
                                       (down . "t")
                                       (left . "h")
                                       (right . "s")))

    (add-to-list 'evil-org-key-theme 'shift)

    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
              (lambda ()
                (evil-org-set-key-theme))))
#+end_src

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :config
    ;; (setq org-bullets-bullet-list '("•"))
    (setq org-bullets-bullet-list '(" "))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

* Epilogue

Here we close the =let= expression from [[*Performance optimization][the preface]].

#+begin_src emacs-lisp
  ;; )
#+end_src

We also reset the value of =gc-cons-threshold=, not to its original value, we still leave it larger than default so that GCs don't happen so often.

#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
